<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: System | Mctrain's Blog]]></title>
  <link href="http://ytliu.github.com/blog/categories/system/atom.xml" rel="self"/>
  <link href="http://ytliu.github.com/"/>
  <updated>2013-05-27T11:19:40+08:00</updated>
  <id>http://ytliu.github.com/</id>
  <author>
    <name><![CDATA[Liu Yutao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ChinaSys小记（2013.5）]]></title>
    <link href="http://ytliu.github.com/blog/2013/05/22/chinasysxiao-ji/"/>
    <updated>2013-05-22T19:25:00+08:00</updated>
    <id>http://ytliu.github.com/blog/2013/05/22/chinasysxiao-ji</id>
    <content type="html"><![CDATA[<p>猛然发现好久没有写博客了，一阵罪恶感袭来，都有点不知道这段日子时间都是怎么过去的了，之前赶CCS失败告终，然后一阵混沌，又去北京参加ChinaSys，和实验室去常州春游，回来继续做我们的project...甚至连课都好久没去上了，以至于这周是单周还是双周都不知道了，今天的专业英语做presentation也错过了（不过还好有靠谱的队友，不然就悲剧了）。</p>

<p>今天去游泳的路上乃正问我最近有没有学到什么好玩的东西，我脱口而出：最近什么东西都没学。。。现在回头想想真的是这样的，最近好像都没有什么能让我记得住的输入，也没有太多很好的输出，整个人就是一种僵硬的状态，感觉很不好。</p>

<p>不过最近有在看一本李笑来的《把时间当做朋友》，觉得里面作者的好多观点都挺有趣的，之前在看Solidot的时候也猛然发现李笑来是当前中国比特币收藏最多的人（10万比特币，约1%的比特币总量），果然是个不寻常的人啊！</p>

<hr />

<p>好吧，还是尽快进入主题吧，上周四到周六去了一趟北京，参加了第四届ChinaSys，和去年10月在武汉参加的第三届ChinaSys相比，这次由于是在北京，清华、北大、中科院计算所、微软亚研的人去的非常之多，人数达到了空前的上百人之多，而且感觉和上次相比自己这次的收获也会大一些，不过遗憾的是之前认识的几个好友这次由于在赶paper都没去。</p>

<p>下面就以流水账的形式记录下自己能记住的一些东西，以及自己的感受吧。</p>

<!-- more -->


<h4>2013.5.16 周四 中关村</h4>

<p>晚上到达北京燕山大酒店，23点小杜杜还专门骑车从清华跑来看我，抱了一个大西瓜，聊了1个来小时，感觉大家都不容易啊，也感觉很温馨！</p>

<h4>2013.5.17 周五 静之湖</h4>

<p>上午去中科院计算所坐车去了北六环的静之湖，吃了个午饭，和清华和华科的几个博士聊了会儿天，就开始了下午的talk。</p>

<ul>
<li>第一个Keynote是由AMD的<a href="http://www.cse.psu.edu/~yuanxie/">谢源</a>教授来讲，他主要从能源、Hyperscale computing等角度来分析了下当前以及未来的系统设计在体系结构等方面的发展方向，由于我在这个方向不是很熟悉，所以听得也比较模糊。</li>
<li>计算所的刘磊博士介绍了他们在去年PACT'12做的Memory bank partition之后又在进行的一些研究工作，即将bank partition和cache partition进行结合，还蛮有意思的。</li>
<li>Intel的段建刚工程师这次也来这里介绍了下他自己以及他们团队做的一些事，他们主要是在Intel里面做开源项目的，介绍了下他们一些感兴趣的方向。</li>
<li>北大的陈琪博士介绍了他们的一个云服务平台自动管理的架构，运用了一些比如color set之类的技术，我也没有听的很认真。</li>
<li>这个session我最有印象的是计算所的另一个工作，叫做<em>Distributed Deadline propagation</em>：他们做的叫做“分布式实时约束传播方法”，打个比方就是将北京的公交系统和纽约的进行比较，在北京，如果一辆车遇到一个红灯，它在之后的路口也会有很大的概率遇到红灯，而在纽约则不是这样的，它们运用了信息共享的技术，使得一辆车不会在多个路口同时碰到红灯，保证了一定的公平性。它将这个原理运用到分布式系统的数据流中，并加入了一个deadline参数，使得其在数据的流动过程中进行传递，提高了数据节点内单个节点的性能波动容忍范围，里面还要进行精确时间控制，主要的做法就是提高或者降低数据的优先级。</li>
</ul>


<p>晚上在微软亚研的赞助下吃了一顿自助餐，认识了三个国防科大的博士。</p>

<h4>2013.5.18 周六 静之湖</h4>

<p>上午的session是两个keynote，一个是Baidu的<a href="http://cn.linkedin.com/pub/shiding-lin/4a/a88/1a2">林仕鼎</a>工程师的talk，他演讲的主题叫做“Application-Driven Datacenter Computing”，介绍了他们家在做的面向应用的架构，以及整个搜索引擎的整个流程框架，同时，他还给出了一些蛮有趣的数据，比如在百度，一个做transaction的机器：</p>

<pre><code>数据总量（100~1000PB）
数据处理量（10-100PB/天）
网页（千亿-万亿）
索引（百亿-千亿）
更新量（十亿-百亿/天）
请求（十亿-百亿/天）
日志（100TB-1PB/天）
</code></pre>

<p>第三个keynote是计算所的<a href="http://www.ncic.ac.cn/en/about/about_XuZhiwei.htm">徐志伟</a>教授给的，题目很有趣，叫做“昆虫纲悖论”，他主要提出一个在他看来未来这个领域的发展方向：人端市场像哺乳动物纲，物端市场像昆虫纲。也就是说他认为未来物端（相比于面对人的服务，物端是指那些面对物的电子设备，比如一些传感器之类的）是一个无法估量的大市场，需要开发出足够合适的系统来支持。那天午餐我正好也和徐教授坐在一桌，我当时问他到底他指的物端是指什么，他的回答是：其实我也不清楚，需要你们自己去发现和定义。。。</p>

<p>午餐还和<a href="http://asg.ict.ac.cn/baoyg/">包云冈</a>老师一起聊了会儿天，从去年ChinaSys开始就一直觉得包老师是一个很儒雅的学者，感觉和他说话什么的也非常舒服，另外之前和他的学生聊天，也说他非常的nice，真的蛮喜欢他的。</p>

<p>下午的三个Session，第一个是security and reliability：</p>

<ul>
<li>第一个是微软亚研的<a href="http://research.microsoft.com/en-us/people/zhenyug/">郭振宇</a>，它的talk题目很吸引人，叫做“Failure recovery: when the cure is worse than the disease”，介绍的是他们实际遇到的问题，即发现很多时候一些failure recovery的程序反而会使得更大的系统down掉。</li>
<li>之后是<a href="http://ipads.se.sjtu.edu.cn/doku.php?id=haibo_chen">海波</a>介绍我们的Redroid，这里就不详说了。</li>
</ul>


<p>之后的两个session是power和multicore，现在还记得的只剩两个talk了：</p>

<ul>
<li>一个是计算所<a href="http://www.carch.ac.cn/~yan/home.html">鄢贵海</a>老师的SmartCap，即通过一系列属性得出Android应用的最高频率，并在Android自带的onDemand算法中限制应用所能得到的最高频率。</li>
<li>还有一个是北京理工大学的<a href="http://cs.bit.edu.cn/~pass/">计卫星</a>老师的关于Ruby并行化中对race detection的研究，主要思想是并行任务在运行过程中locally处理读与写，并在聚合的时候检查之前是否存在冲突。</li>
</ul>


<p>然后就坐车回计算所，然后去北京南站坐动车回上海了。。。</p>

<hr />

<p>总的来说，ChinaSys就是中国那些系统方向的大佬们的一次聚会，以及让我们这些不同学校的小博士们进行一些学术交流，或者互相吐吐槽，多认识些人，了解下大家都在做些什么东西。两天的ChinaSys之行还是蛮有趣的，虽然一直在听talk有些疲惫，加上溃疡吃东西也不是很舒服，但是还是很值得的。</p>

<hr />

<p>到上海之后两天就和实验室一起去常州南山和天目湖春游了，爬了两天的山，脚好酸，感觉自己太弱了！最后放一张图作为结束吧（感觉这张照片的构图很不错，最后那个摆出V字形的就是弱弱的我啦啦啦）</p>

<p><img src="http://ytliu.info/images/2013-05-22-1.jpeg" title="IPADS Image" alt="IPADS Image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步原语学习笔记 - Lock，RCU和Transaction Memory]]></title>
    <link href="http://ytliu.github.com/blog/2013/04/14/tong-bu-yuan-yu-xue-xi-bi-ji-lock%2Crcuhe-transaction/"/>
    <updated>2013-04-14T14:24:00+08:00</updated>
    <id>http://ytliu.github.com/blog/2013/04/14/tong-bu-yuan-yu-xue-xi-bi-ji-lock,rcuhe-transaction</id>
    <content type="html"><![CDATA[<p>这周最大的收获就是周四那天，感觉被洗脑了一样，上午P哥给我们讲他的<a href="http://ipads.se.sjtu.edu.cn/lib/exe/fetch.php?media=publications:reemu-ppopp13.pdf">ReEmu</a>，里面讲的最多的就是在它的replay系统中如何记录shared memory access order。还有一个就是Naruil下午讲的“The myth of lock &amp; scalability“，讲了lock，RCU，Transaction memory的一些基本原理和它们的发展过程，以及其中的一些scalability的问题。</p>

<p>关于ReEmu，主要是说需要记录哪些non-determinism：里面主要讲了interrupt，DMA handling，在不同cores发生page fault时的走页表顺序问题，对于一些non-deterministic的指令，比如in/out的处理，以及在共享内存访问中不同核的访问顺序。其中最重要的就是memory access order，即如何记录read-after-write, write-after-write和write-after-read的方法。这篇paper最大的贡献在于它利用了CREW（Concurrent Read，Exclusive Write）和seqlock的特性，利用version极大地减小了原子操作的数量，减小了log的大小，提高了efficiency和scalability。具体如何做的还是直接看paper吧，这里就不详述了。</p>

<p>这次主要想记的是Naruil关于一些同步原语的讲解。之前一直对Read-Write Lock, RCU，Transaction Memory等都只是一知半解，这几周由于海波和大爷的课，以及组会对这些都提到了好多，因此希望能把它们记下来做个笔记，省的自己又很快就忘记了。</p>

<!-- more -->


<p>slides在<a href="http://ipads.se.sjtu.edu.cn/courses/ads/slides/lec7-lock.pdf">这里</a>。</p>

<p>刚开始有个印象很深的提法，他说在计算机中不同核（或者在分布式系统中不同机器）之间的交流一般只有两种方式：<strong>message passing</strong>和<strong>shared memory</strong>，而对于第二种shared memory的方式，其本质上也是一种message passing（比如在多核之间的SM其实就是inter-processor间cache的message passing）。</p>

<p>还有一个印象很深的知识点就是对于我们平常提到的原子指令（比如test_and_set），只要是对于一个共享变量的原子指令，都会涉及到cache invalidation，即要把其它核的cache line都invalidate，这就是造成在多核环境下scalability上不去的原因，因为过多的原子指令将会造成in-flight的message太多（这个也是那篇<a href="http://pdos.csail.mit.edu/papers/linux:lock.pdf">Non-scalable locks are dangerous</a>强调的问题）。因此在同步原语中要想获得高的scalability，就必须减少对共享变量的原子操作（其实在ReEmu中它的目的也正是如此）。</p>

<h3>Read-Write Lock</h3>

<p>读写锁，顾名思义，就是将读锁和写锁分开来处理，对于读锁，它可以允许多个读者同时对一个共享变量进行读取，但是需要维护一个全局counter来记录读者的数量。当某个核产生一个写的请求，那么就不能再允许有新的读者进入critical section（CS），而写者也需要所有读者结束（即counter降为0）后才可以进入写的CS。在这里，一般的实现方式是这样的：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Read</span> <span class="n">object</span> <span class="n">begin</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">P</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'><span class="n">AtomicAdd</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">activeReader</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">V</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'><span class="n">Do</span> <span class="n">Actual</span> <span class="n">Read</span>
</span><span class='line'><span class="n">AtomicAdd</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">activeReaders</span><span class="p">,</span> <span class="err">−</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">end</span>
</span><span class='line'><span class="n">Write</span> <span class="n">object</span> <span class="n">begin</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">P</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="n">object</span><span class="p">.</span><span class="n">activeReaders</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">do</span> <span class="n">delay</span>
</span><span class='line'><span class="n">Do</span> <span class="n">Actual</span> <span class="n">Write</span>
</span><span class='line'><span class="n">V</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="n">lock</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里值得注意的是，虽然它减小了读者和读者之间信号量（P/V）的竞争，但是读者在读之前需要对共享变量activeReader进行原子加，安装前面所说的，这就会造成cache line invalidate message数量的增加，不具有很好的可扩展性。</p>

<p>为了减小等待message的时间，有一种解决方法叫GOLL:</p>

<p><img src="http://ytliu.info/images/2013-04-14-01.png" title="GOLL" alt="GOLL" /></p>

<p>即构造一棵二叉树，两个reader共享一个activeReader，而对于writer来说，只要其子节点存在activeReader，则它就为1。</p>

<p>另外一种方法叫BR lock：</p>

<p><img src="http://ytliu.info/images/2013-04-14-02.png" title="big reader lock" alt="BRLock" /></p>

<p>和GOLL相比，它为每一个reader都维护一个变量，这样在reader之间都完全不会存在message，但是对于writer来说，它的overhead则增大了很多，在writer进入CS之前，需要所有的reader都发message给它。</p>

<p>另外，如果我们为了增加公平性，采用一个ticket lock的形式，那么同样的，如果这个ticket是全局共享的，那么也会有同样的问题，于是就提出了一种叫做MCS lock的机制。</p>

<h3>MCS Lock</h3>

<p>MCS是由两个人(Mellor-Crummey and Scott)发明的算法，相比于需要维护一个全局变量的ticket based lock，在MCS lock中，每个进程只需要各自维护一个local variable，这个局部变量可以是一个用于spin的flag，用于标识自己是否拿到锁了。另外，存在一个全局的队列，拿锁的过程相当于向队列中插入一个结构体qnode，这个结构体包含了某个进程的flag——locked，和这个qnode指向的下一个qnode的地址：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">procedure</span> <span class="n">acquire_lock</span><span class="p">(</span> <span class="n">L</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">lock</span><span class="p">,</span> <span class="n">I</span><span class="o">:</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qnode</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">pred</span><span class="o">:</span> <span class="o">*</span><span class="n">qnode</span>
</span><span class='line'><span class="n">I</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span> <span class="o">:=</span> <span class="n">nil</span> <span class="c1">// Initially, no successor</span>
</span><span class='line'><span class="n">pred</span> <span class="o">:=</span> <span class="n">swap</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">I</span><span class="p">)</span> <span class="c1">// Queue for lock</span>
</span><span class='line'><span class="k">if</span> <span class="n">pred</span> <span class="mi">6</span><span class="o">=</span> <span class="n">nil</span> <span class="c1">// Lock was not free</span>
</span><span class='line'>    <span class="n">i</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">locked</span> <span class="o">:=</span> <span class="nb">true</span> <span class="c1">// Prepare to spin</span>
</span><span class='line'>    <span class="n">pred</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span> <span class="o">:=</span> <span class="n">I</span> <span class="c1">// Link behind predecessor</span>
</span><span class='line'>    <span class="n">repeat</span> <span class="k">while</span> <span class="n">I</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">locked</span> <span class="c1">// Busy wait for lock</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在这里，有一个变量<code>L</code>，它也是一个qnode，表示全局队列中最后一个拿锁插入的qnode，通过<code>swap(L, I)</code>（将I的值赋给L，并返回L的值），得到前一个拿锁的qnode pred，将它的next指向自己，并spin在自己的这个locked局部变量中。</p>

<p>而释放锁的过程也就显而易见了：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">procedure</span> <span class="n">release_lock</span><span class="p">(</span> <span class="n">L</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">lock</span><span class="p">,</span> <span class="n">I</span><span class="o">:</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qnode</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">I</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span> <span class="o">=</span> <span class="n">nil</span> <span class="c1">// No known successor</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">compare_and_swap</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="c1">// No successor, lock free</span>
</span><span class='line'>    <span class="n">repeat</span> <span class="k">while</span> <span class="n">I</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span> <span class="o">=</span> <span class="n">nil</span> <span class="c1">// Wait for successor</span>
</span><span class='line'><span class="n">I</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">locked</span> <span class="o">:=</span> <span class="nb">false</span> <span class="c1">// Pass lock</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>先判断自己是不是最后一个拿锁的人，如果不是，则将下一个qnode的locked设成false，即将锁传递给下一个qnode。</p>

<p>由于MCS lock是spin在自己的局部变量上的，所以就没有前面说过的scalability的问题。不过MCS对于核数比较少的情况似乎性能不是很好（这个我也不是很理解）。</p>

<h3>RCU (Read-Copy-Updata)</h3>

<p>除了lock之后，还有一种同步原语叫RCU：</p>

<p><img src="http://ytliu.info/images/2013-04-14-03.png" title="RCU" alt="RCU" /></p>

<p>RCU最大的特点在于writer可以在reader进行读取操作的时候直接修改，不过需要注意的是，这里的修改是这样的：</p>

<ul>
<li>首先对Shared_data进行一次拷贝（到一个新的地址B）；</li>
<li>更新B指向的对象；</li>
<li>将Shared_data原来的地址赋给一个新的变量Old_data；</li>
<li>将Shared_data赋值为B。</li>
</ul>


<p>这样有一个问题就是，几个reader可能会在一段时间内读到的值是不一样的，有些读到的是old value，有些读到的是new value。但是可以保证的是，当执行完</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Shared_data</span> <span class="o">=</span> <span class="n">B</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>之后，所有的reader读到的值都是改过后的值！</p>

<p>另外这里还要考虑一个问题，那就是什么时候释放这个Old_data？</p>

<p>这里注意在Reader的代码中，<code>rcu_read_lock()</code>会关闭中断，禁止在一个核中其它进程的抢断，而<code>rcu_read_unlock()</code>则会打开中断，恢复抢断机制。于是writer就可以根据reader进程是否进行过context switch来判断说是否对Shared_data的读过程是否全部结束了：</p>

<p><img src="http://ytliu.info/images/2013-04-14-04.png" title="RCU Figure" alt="RCU figure 2" /></p>

<p>RCU还要考虑的一个问题是在reader中是否能允许sleep？因为如果一个reader在读的过程中如果碰到一段IO操作，那么它如果不sleep的话，则会很大地浪费CPU资源，而如果sleep的话，则会发生一次context switch，而此时，读的过程其实并没有结束，与RCU的语义就不符了。</p>

<p>对于这个问题，按照Naruil的说法，也产生了一系列研究，比如允许sleep的RCU等，这里就不展开了（其实是我也不懂啦）。</p>

<p>和之前提到的RW lock等相比，RCU没有scalability的问题，性能会好很多。所以当前RCU被运用到Linux的很多地方，这里有一个插曲是说当年发明RCU的是作者是IBM的一个员工，它就靠着RCU这么一个东西在IBM待了20多年，而RCU也被申请了专利，像FreeBSD这些系统是不被允许使用RCU的。</p>

<p>当然RCU还有很多问题，比如它有很多semantic的限制，对于那些不允许在一段时间内多个reader会读到不同值的情况就不能使用RCU。另外，RCU只能应用在一些比较简单的数据结构中，如果遇到比较复杂的数据结果就挂掉了，因为它需要程序员自己处理很多corner cases。</p>

<h3>Transaction Memory</h3>

<p>最后要讲的一个同步原语就是Transaction Memory（TM），这个最近几年很火的一个研究方向，特别是当Hardware TM（HTM）问世之后。</p>

<p>安装Naruil的说法，TM的原理大概是这样的：在一个Transaction中，可以访问不同的对象（这个粒度可以自己控制，可以是几个cache line，几个page...)，而当访问了某个对象之后，它对应的cache line上就会有一个flag标识，当一个进程进行commit，则会将自己对应的那些cache line上的flag清楚，而对于其它访问了这些cache line的transaction，则会abort，并invalidate 这些cache line。</p>

<p>TM的好处在于它可以非常细粒度地进行同步，并且避免了对lock这样一个额外的同步变量维护产生的cache message。</p>

<hr />

<p>同步原语真的是一个非常需要智商的领域，我最近对此感觉特别深刻。我想在这个领域里搞研究的应该都是一群智商超群的人吧:)</p>
]]></content>
  </entry>
  
</feed>
